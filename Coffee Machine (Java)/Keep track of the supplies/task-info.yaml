type: edu
files:
- name: src/machine/CoffeeMachine.java
  visible: true
  text: |
    package machine;

    public class CoffeeMachine {
        public static void main(String[] args) {
            System.out.println("Hello World!");
        }
    }
  learner_created: false
- name: test/CoffeeMachineTest.java
  visible: false
  text: |
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.util.ArrayList;
    import java.util.List;


    class TestClue {
        int water;
        int milk;
        int beans;
        int cups;
        int money;
        String feedback;
        TestClue(int w, int m, int b, int c, int mo, String feedback) {
            water = w;
            milk = m;
            beans = b;
            cups = c;
            money = mo;
            this.feedback = feedback;
        }
    }

    public class CoffeeMachineTest extends StageTest<TestClue> {

        @Override
        public List<TestCase<TestClue>> generate() {
            return List.of(
                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    700 - 400,
                    390 - 540,
                    80 - 120 ,
                    7 - 9,
                    0 - 550,
                        "This test is exactly " +
                            "like in the example - try to run it by yourself"))
                    .setInput(
                        "remaining\n" +
                        "buy\n" +
                        "2\n" +
                        "buy\n" +
                        "2\n" +
                        "fill\n" +
                        "1000\n" +
                        "0\n" +
                        "0\n" +
                        "0\n" +
                        "buy\n" +
                        "2\n" +
                        "take\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    3000,
                    3000,
                    3000 ,
                    3000,
                    0,
                        "This test checks \"fill\" action"))
                    .setInput(
                        "remaining\n" +
                        "fill\n" +
                        "3000\n" +
                        "3000\n" +
                        "3000\n" +
                        "3000\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    -250,
                    0,
                    -16 ,
                    -1,
                    4, "This test checks \"buy\" " +
                        "action with the first variant of coffee"))
                    .setInput(
                        "remaining\n" +
                        "buy\n" +
                        "1\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    -350,
                    -75,
                    -20 ,
                    -1,
                    7, "This test checks \"buy\" " +
                        "action with the second variant of coffee"))
                    .setInput(
                        "remaining\n" +
                        "buy\n" +
                        "2\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    -200,
                    -100,
                    -12 ,
                    -1,
                    6, "This test checks \"buy\" " +
                        "action with the third variant of coffee"))
                    .setInput(
                        "remaining\n" +
                        "buy\n" +
                        "3\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    0,
                    0,
                    0 ,
                    0,
                    -550, "This test checks \"take\" action"))
                    .setInput(
                        "remaining\n" +
                        "take\n" +
                        "remaining\n" +
                        "exit\n"),

                new TestCase<TestClue>()
                    .setAttach(new TestClue(
                    0,
                    0,
                    0 ,
                    0,
                    0, "This test checks \"back\" " +
                        "action right after \"buy\" action"))
                    .setInput(
                        "remaining\n" +
                        "buy\n" +
                        "back\n" +
                        "remaining\n" +
                        "exit\n")
            );
        }

        @Override
        public CheckResult check(String reply, TestClue clue) {
            String[] lines = reply.split("\\n");

            if (lines.length <= 1) {
                return CheckResult.wrong("Looks like you didn't print anything!");
            }

            int water_ = clue.water;
            int milk_ = clue.milk;
            int beans_ = clue.beans;
            int cups_ = clue.cups;
            int money_ = clue.money;

            List<Integer> milk = new ArrayList<>();
            List<Integer> water = new ArrayList<>();
            List<Integer> beans = new ArrayList<>();
            List<Integer> cups = new ArrayList<>();
            List<Integer> money = new ArrayList<>();

            for (String line : lines) {
                line = line.replace("$", "").trim();
                String[] words = line.split("\\s+");
                if (words.length == 0) {
                    continue;
                }
                String firstWord = words[0];
                int amount;
                try {
                    amount = Integer.parseInt(firstWord);
                }
                catch (Exception e) {
                    continue;
                }
                if (line.contains("milk")) {
                    milk.add(amount);
                }
                else if (line.contains("water")) {
                    water.add(amount);
                }
                else if (line.contains("beans")) {
                    beans.add(amount);
                }
                else if (line.contains("cups")) {
                    cups.add(amount);
                }
                else if (line.contains("money")) {
                    money.add(amount);
                }
            }

            if (milk.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"milk\", " +
                        "found: " + milk.size());
            }

            if (water.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"water\", " +
                        "found: " + water.size());
            }

            if (beans.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"beans\", " +
                        "found: " + beans.size());
            }

            if (cups.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"cups\", " +
                        "found: " + cups.size());
            }

            if (money.size() != 2) {
                return new CheckResult(false,
                    "There should be two lines with \"money\", " +
                        "found: " + money.size());
            }

            int milk0 = milk.get(0);
            int milk1 = milk.get(milk.size() - 1);

            int water0 = water.get(0);
            int water1 = water.get(water.size() - 1);

            int beans0 = beans.get(0);
            int beans1 = beans.get(beans.size() - 1);

            int cups0 = cups.get(0);
            int cups1 = cups.get(cups.size() - 1);

            int money0 = money.get(0);
            int money1 = money.get(money.size() - 1);

            int diffWater = water1 - water0;
            int diffMilk = milk1 - milk0;
            int diffBeans = beans1 - beans0;
            int diffCups = cups1 - cups0;
            int diffMoney = money1 - money0;

            boolean isCorrect =
                diffWater == water_ &&
                diffMilk == milk_ &&
                diffBeans == beans_ &&
                diffCups == cups_ &&
                diffMoney == money_;

            return new CheckResult(isCorrect, clue.feedback);
        }
    }
  learner_created: false
- name: src/machine/Input.java
  visible: true
  text: |
    package machine;

    import java.util.Scanner;

    public class Input {
        Scanner scanner = new Scanner(System.in);
        calculate start = new calculate();

        public void userInput(){
            System.out.println("Write action (buy, fill, take):");
            String input = scanner.nextLine();
            if (input.equals("buy")){
                buy();
            } else if (input.equals("fill")) {
                fill();
            } else if (input.equals("take")) {
                take();
            }
        }
        public void buy(){
            System.out.println("What do you want to buy? 1 - espresso, 2 - latte, 3 - cappuccino:");
            int inputBuy = scanner.nextInt();
            if (inputBuy == 1){
                start.espresso();
            } else if (inputBuy == 2) {
                start.latte();
            } else if (inputBuy == 3) {
                start.cappuccino();
            }
        }

        public void fill(){
            System.out.println("Write how many ml of water you want to add: ");
            int addWater= scanner.nextInt();
            System.out.println("Write how many ml of milk you want to add: ");
            int addMilk = scanner.nextInt();
            System.out.println("Write how many grams of coffee beans you want to add: ");
            int addBeans = scanner.nextInt();
            System.out.println("Write how many disposable cups you want to add:  ");
            int addCups = scanner.nextInt();
            start.add(addWater, addMilk, addBeans, addCups);
        }

        public void take(){
            start.take();
        }
    }
  learner_created: true
- name: src/machine/calculate.java
  visible: true
  text: |
    package machine;

    public class calculate {
        int water = 400;
        int milk = 540;
        int coffeeBeans = 120;
        int money = 550;
        int cups = 9;

        public void coffeeMachineHas(){
            System.out.println("The coffee machine has:\n" +
                    water +" ml of water\n" +
                    milk+" ml of milk\n" +
                    coffeeBeans+" g of coffee beans\n" +
                    cups+" disposable cups\n" +
                    "$"+money+" of money");
        }

        public void espresso(){
            water -= 250;
            coffeeBeans -=16;
            money+=4;
            cups--;
            updateState();
        }

        public void latte(){
            water -= 350;
            milk-=75;
            coffeeBeans -=20;
            money+=7;
            cups--;
            updateState();
        }

        public void cappuccino(){
            water -= 200;
            milk-=100;
            coffeeBeans -=12;
            money+=6;
            cups--;
            updateState();
        }

        public void add(int addWater, int addMilk, int addBeans, int addCups){
            water += addWater;
            milk += addMilk;
            coffeeBeans += addBeans;
            cups += addCups;
            updateState();
        }

        public void take(){
            System.out.println("I gave you $"+money);
            money = 0;
            updateState();
        }

        private void updateState(){
            System.out.println("The coffee machine has:\n" +
                    water +" ml of water\n" +
                    milk+" ml of milk\n" +
                    coffeeBeans+" g of coffee beans\n" +
                    cups+" disposable cups\n" +
                    "$"+money+" of money");
        }

    //    public int waterAmount;
    //    public int milkAmont;
    //    public int coffeeBeansAmount;
    //
    //    public void calc(int times){
    //        waterAmount/= water;
    //        milkAmont/= milk;
    //        coffeeBeansAmount/= coffeeBeans;
    //
    //        int min = Math.min(waterAmount, milkAmont);
    //        min = Math.min(coffeeBeansAmount, min);
    //
    //        if (times == min) {
    //            System.out.println("Yes, I can make that amount of coffee");
    //        } else if (times < min) {
    //            System.out.println("Yes, I can make that amount of coffee (and even " + (min - times) + " more than that)");
    //        } else {
    //            System.out.println("No, I can make only " + min + " cup(s) of coffee");
    //        }
    //
    //    }

    //    public void calc(int times){
    //        int count = 0;
    //        boolean greather = true;
    //
    //        while (greather){
    //            milkAmont = milkAmont-milk;
    //            waterAmount = waterAmount-water;
    //            coffeeBeansAmount = coffeeBeansAmount-coffeeBeans;
    //            if ((milkAmont >= 0)&&(waterAmount >= 0)&&(coffeeBeansAmount>=0)){
    //                count++;
    //            } else {
    //                greather = false;
    //            }
    //        }
    //
    //        int otherCups = times-count;
    //
    //        if (count == times){
    //            System.out.println("Yes, I can make that amount of coffee");
    //        } else if (count > times) {
    //            System.out.println("Yes, I can make that amount of coffee");
    //            System.out.print("(and even "+ otherCups+" more than that)");
    //        } else {
    //            System.out.println("No, I can make only "+count+" cup(s) of coffee");
    //        }
    //
    //    }
    }
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/5333#comment
status: Solved
feedback:
  message: Congratulations!
  time: "Fri, 07 Jul 2023 13:05:49 UTC"
record: 5
